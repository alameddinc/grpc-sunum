// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protoGo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FishServiceClient is the client API for FishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FishServiceClient interface {
	Register(ctx context.Context, in *RequestRegister, opts ...grpc.CallOption) (FishService_RegisterClient, error)
	TryToCatch(ctx context.Context, opts ...grpc.CallOption) (FishService_TryToCatchClient, error)
	HighScore(ctx context.Context, in *RequestHighScore, opts ...grpc.CallOption) (*ResponseHighScore, error)
}

type fishServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFishServiceClient(cc grpc.ClientConnInterface) FishServiceClient {
	return &fishServiceClient{cc}
}

func (c *fishServiceClient) Register(ctx context.Context, in *RequestRegister, opts ...grpc.CallOption) (FishService_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &FishService_ServiceDesc.Streams[0], "/fish.FishService/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &fishServiceRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FishService_RegisterClient interface {
	Recv() (*ResponseRegister, error)
	grpc.ClientStream
}

type fishServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *fishServiceRegisterClient) Recv() (*ResponseRegister, error) {
	m := new(ResponseRegister)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fishServiceClient) TryToCatch(ctx context.Context, opts ...grpc.CallOption) (FishService_TryToCatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &FishService_ServiceDesc.Streams[1], "/fish.FishService/TryToCatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &fishServiceTryToCatchClient{stream}
	return x, nil
}

type FishService_TryToCatchClient interface {
	Send(*RequestMessage) error
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type fishServiceTryToCatchClient struct {
	grpc.ClientStream
}

func (x *fishServiceTryToCatchClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fishServiceTryToCatchClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fishServiceClient) HighScore(ctx context.Context, in *RequestHighScore, opts ...grpc.CallOption) (*ResponseHighScore, error) {
	out := new(ResponseHighScore)
	err := c.cc.Invoke(ctx, "/fish.FishService/HighScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FishServiceServer is the server API for FishService service.
// All implementations must embed UnimplementedFishServiceServer
// for forward compatibility
type FishServiceServer interface {
	Register(*RequestRegister, FishService_RegisterServer) error
	TryToCatch(FishService_TryToCatchServer) error
	HighScore(context.Context, *RequestHighScore) (*ResponseHighScore, error)
	mustEmbedUnimplementedFishServiceServer()
}

// UnimplementedFishServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFishServiceServer struct {
}

func (UnimplementedFishServiceServer) Register(*RequestRegister, FishService_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFishServiceServer) TryToCatch(FishService_TryToCatchServer) error {
	return status.Errorf(codes.Unimplemented, "method TryToCatch not implemented")
}
func (UnimplementedFishServiceServer) HighScore(context.Context, *RequestHighScore) (*ResponseHighScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HighScore not implemented")
}
func (UnimplementedFishServiceServer) mustEmbedUnimplementedFishServiceServer() {}

// UnsafeFishServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FishServiceServer will
// result in compilation errors.
type UnsafeFishServiceServer interface {
	mustEmbedUnimplementedFishServiceServer()
}

func RegisterFishServiceServer(s grpc.ServiceRegistrar, srv FishServiceServer) {
	s.RegisterService(&FishService_ServiceDesc, srv)
}

func _FishService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestRegister)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FishServiceServer).Register(m, &fishServiceRegisterServer{stream})
}

type FishService_RegisterServer interface {
	Send(*ResponseRegister) error
	grpc.ServerStream
}

type fishServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *fishServiceRegisterServer) Send(m *ResponseRegister) error {
	return x.ServerStream.SendMsg(m)
}

func _FishService_TryToCatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FishServiceServer).TryToCatch(&fishServiceTryToCatchServer{stream})
}

type FishService_TryToCatchServer interface {
	Send(*ResponseMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type fishServiceTryToCatchServer struct {
	grpc.ServerStream
}

func (x *fishServiceTryToCatchServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fishServiceTryToCatchServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FishService_HighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHighScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServiceServer).HighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fish.FishService/HighScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServiceServer).HighScore(ctx, req.(*RequestHighScore))
	}
	return interceptor(ctx, in, info, handler)
}

// FishService_ServiceDesc is the grpc.ServiceDesc for FishService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FishService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fish.FishService",
	HandlerType: (*FishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HighScore",
			Handler:    _FishService_HighScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _FishService_Register_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TryToCatch",
			Handler:       _FishService_TryToCatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/fish.proto",
}
